import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from joblib import load
from database import session  # Gi·∫£ ƒë·ªãnh ƒë√¢y l√† k·∫øt n·ªëi ƒë·∫øn Cassandra

# Load m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán
try:
    model = load('churn_model.joblib')
except FileNotFoundError:
    st.error("Kh√¥ng t√¨m th·∫•y file 'churn_model.joblib'. Vui l√≤ng ƒë·∫£m b·∫£o file m√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán v√† ƒë·∫∑t ƒë√∫ng th∆∞ m·ª•c.")
    st.stop()

# Truy v·∫•n d·ªØ li·ªáu t·ª´ Cassandra
try:
    rows = session.execute("SELECT num_dependents, gender, churned FROM customer_churn")
    data = pd.DataFrame(rows, columns=['num_dependents', 'gender', 'churned'])
except Exception as e:
    st.error(f"L·ªói khi truy v·∫•n d·ªØ li·ªáu t·ª´ Cassandra: {str(e)}")
    st.stop()

# Th√™m c·ªôt "has_dependents" ƒë·ªÉ ph√¢n lo·∫°i C√≥/Kh√¥ng ng∆∞·ªùi ph·ª• thu·ªôc
data['has_dependents'] = data['num_dependents'].apply(lambda x: 'Yes' if x > 0 else 'No')

# Th√™m c·ªôt customerID n·∫øu kh√¥ng c√≥ trong d·ªØ li·ªáu
if 'customerID' not in data.columns:
    data['customerID'] = [f'000{i}-XYZ' for i in range(1, len(data) + 1)]

# Thi·∫øt l·∫≠p giao di·ªán
st.set_page_config(layout="wide")
st.title("Ph√¢n T√≠ch Kh·∫£ NƒÉng Kh√°ch H√†ng R·ªùi Kh·ªèi D·ªãch V·ª• D·ª±a Tr√™n S·ªë Ng∆∞·ªùi Ph·ª• Thu·ªôc V√† Gi·ªõi T√≠nh")

# T·∫°o c√°c tab
tab1, tab2 = st.tabs(["D·ªØ Li·ªáu & Th·ªëng K√™", "Tr·ª±c Quan H√≥a D·ªØ Li·ªáu"])

# --- Tab 1: D·ªØ Li·ªáu & Th·ªëng K√™ ---
with tab1:
    # Ph·∫ßn 1: L·ªçc d·ªØ li·ªáu & D·ª± ƒëo√°n
    st.subheader("üîé L·ªçc D·ªØ Li·ªáu & D·ª± ƒêo√°n")
    col1, col2, col3, col4 = st.columns([1, 1, 1, 1])

    # L·ªçc theo gi·ªõi t√≠nh
    with col1:
        gender_filter = st.selectbox("L·ªçc theo gi·ªõi t√≠nh", ["All", "Male", "Female"])

    # L·ªçc theo tr·∫°ng th√°i c√≥/kh√¥ng ng∆∞·ªùi ph·ª• thu·ªôc
    with col2:
        dependents_filter = st.selectbox("L·ªçc theo tr·∫°ng th√°i ng∆∞·ªùi ph·ª• thu·ªôc", ["All", "Yes", "No"])

    # Nh·∫≠p li·ªáu ƒë·ªÉ d·ª± ƒëo√°n
    with col3:
        has_dependents = st.selectbox("C√≥ ng∆∞·ªùi ph·ª• thu·ªôc (D·ª± ƒëo√°n)", ["Yes", "No"])  # Thay slider b·∫±ng selectbox
    with col4:
        gender = st.selectbox("Gi·ªõi t√≠nh (D·ª± ƒëo√°n)", ["Male", "Female"])
    gender_encoded = 1 if gender == "Male" else 0

    # Chuy·ªÉn ƒë·ªïi has_dependents th√†nh num_dependents ƒë·ªÉ ph√π h·ª£p v·ªõi m√¥ h√¨nh
    num_dependents = 1 if has_dependents == "Yes" else 0

    # √Åp d·ª•ng b·ªô l·ªçc
    filtered_data = data.copy()
    if gender_filter != "All":
        filtered_data = filtered_data[filtered_data['gender'] == gender_filter]
    if dependents_filter != "All":
        filtered_data = filtered_data[filtered_data['has_dependents'] == dependents_filter]

    # N√∫t "D·ª± ƒëo√°n" ƒë∆∞·ª£c t√≠ch h·ª£p v√†o ph·∫ßn l·ªçc
    if st.button("D·ª± ƒëo√°n"):
        # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·∫ßu v√†o cho m√¥ h√¨nh
        input_data = np.array([[num_dependents, gender_encoded]])
        try:
            prediction = model.predict(input_data)[0]
            if prediction == 1:
                st.error(f"K·∫øt qu·∫£: Kh√°ch h√†ng S·∫º r·ªùi b·ªè d·ªãch v·ª•!")
            else:
                st.success(f"K·∫øt qu·∫£: Kh√°ch h√†ng KH√îNG r·ªùi b·ªè d·ªãch v·ª•.")
            st.write(f"C√≥ ng∆∞·ªùi ph·ª• thu·ªôc: {has_dependents}")
            st.write(f"Gi·ªõi t√≠nh: {gender}")
        except Exception as e:
            st.error(f"L·ªói khi d·ª± ƒëo√°n: {str(e)}")
            st.write("Vui l√≤ng ki·ªÉm tra m√¥ h√¨nh v√† d·ªØ li·ªáu ƒë·∫ßu v√†o.")

    # Hi·ªÉn th·ªã d·ªØ li·ªáu ƒë√£ l·ªçc
    st.subheader("üìå D·ªØ Li·ªáu Kh√°ch H√†ng ƒê√£ L·ªçc")
    st.dataframe(filtered_data[['customerID', 'num_dependents', 'gender', 'has_dependents', 'churned']])

    # Ph·∫ßn 2: Th·ªëng k√™ d·ªØ li·ªáu b·∫±ng b·∫£ng s·ªë li·ªáu
    st.subheader("üìà Th·ªëng K√™ D·ªØ Li·ªáu")
    total_customers = len(filtered_data)
    customers_churned = filtered_data['churned'].sum()
    churn_rate = (customers_churned / total_customers) * 100 if total_customers > 0 else 0
    avg_num_dependents = filtered_data['num_dependents'].mean()

    # Hi·ªÉn th·ªã th·ªëng k√™
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("T·ªïng s·ªë kh√°ch h√†ng", total_customers)
    col2.metric("S·ªë kh√°ch h√†ng r·ªùi b·ªè", customers_churned)
    col3.metric("T·ª∑ l·ªá r·ªùi b·ªè", f"{churn_rate:.2f}%")
    col4.metric("S·ªë ng∆∞·ªùi ph·ª• thu·ªôc trung b√¨nh", f"{avg_num_dependents:.2f}")

# --- Tab 2: Tr·ª±c Quan H√≥a D·ªØ Li·ªáu ---
with tab2:
    st.subheader("üìä Tr·ª±c Quan H√≥a D·ªØ Li·ªáu")

    # S·∫Øp x·∫øp 2 bi·ªÉu ƒë·ªì tr√™n 1 h√†ng
    col1, col2 = st.columns(2)

    # Bi·ªÉu ƒë·ªì 1: Ph√¢n b·ªë s·ªë ng∆∞·ªùi ph·ª• thu·ªôc theo tr·∫°ng th√°i r·ªùi b·ªè
    with col1:
        st.write("Ph√¢n b·ªë s·ªë ng∆∞·ªùi ph·ª• thu·ªôc theo tr·∫°ng th√°i r·ªùi b·ªè")
        fig1, ax1 = plt.subplots(figsize=(5, 3))
        sns.histplot(data=filtered_data, x="num_dependents", hue="churned", multiple="stack", ax=ax1)
        ax1.set_title("Churn by Number of Dependents", fontsize=10)
        ax1.set_xlabel("Number of Dependents", fontsize=8)
        ax1.set_ylabel("Count", fontsize=8)
        ax1.tick_params(axis='both', labelsize=8)
        plt.tight_layout()
        st.pyplot(fig1)

    # Bi·ªÉu ƒë·ªì 2: T·ª∑ l·ªá r·ªùi b·ªè theo gi·ªõi t√≠nh
    with col2:
        st.write("T·ª∑ l·ªá r·ªùi b·ªè theo gi·ªõi t√≠nh")
        fig2, ax2 = plt.subplots(figsize=(5, 3))
        sns.countplot(data=filtered_data, x='gender', hue='churned', ax=ax2)
        ax2.set_title("Churn Rate by Gender", fontsize=10)
        ax2.set_xlabel("Gender", fontsize=8)
        ax2.set_ylabel("Count", fontsize=8)
        ax2.tick_params(axis='both', labelsize=8)
        plt.tight_layout()
        st.pyplot(fig2)

    # S·∫Øp x·∫øp 2 bi·ªÉu ƒë·ªì ti·∫øp theo tr√™n 1 h√†ng
    col3, col4 = st.columns(2)

    # Bi·ªÉu ƒë·ªì 3: T·ª∑ l·ªá r·ªùi b·ªè theo tr·∫°ng th√°i c√≥/kh√¥ng ng∆∞·ªùi ph·ª• thu·ªôc
    with col3:
        st.write("T·ª∑ l·ªá r·ªùi b·ªè theo tr·∫°ng th√°i c√≥/kh√¥ng ng∆∞·ªùi ph·ª• thu·ªôc")
        fig3, ax3 = plt.subplots(figsize=(5, 3))
        sns.countplot(data=filtered_data, x='has_dependents', hue='churned', ax=ax3)
        ax3.set_title("Churn Rate by Dependents Status", fontsize=10)
        ax3.set_xlabel("Has Dependents", fontsize=8)
        ax3.set_ylabel("Count", fontsize=8)
        ax3.tick_params(axis='both', labelsize=8)
        plt.tight_layout()
        st.pyplot(fig3)

    # Bi·ªÉu ƒë·ªì 4: Ph√¢n b·ªë tr·∫°ng th√°i r·ªùi b·ªè
    with col4:
        st.write("Ph√¢n b·ªë tr·∫°ng th√°i r·ªùi b·ªè")
        fig4, ax4 = plt.subplots(figsize=(4, 3))
        filtered_data['churned'].value_counts().plot.pie(autopct='%1.1f%%', labels=['Not Churned', 'Churned'], ax=ax4, textprops={'fontsize': 8})
        ax4.set_title("Churn Distribution", fontsize=10)
        plt.tight_layout()
        st.pyplot(fig4)